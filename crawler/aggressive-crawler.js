// Îçî Í≥µÍ≤©Ï†ÅÏù∏ Ïã§Ï†ú Ï±ÑÏö©Í≥µÍ≥† ÌÅ¨Î°§Îü¨

const puppeteer = require('puppeteer');

class AggressiveCrawler {
  async crawlJobKorea() {
    console.log('üîç Ïû°ÏΩîÎ¶¨ÏïÑÏóêÏÑú ÎÑ§Ïπ¥ÎùºÏø†Î∞∞ Ï±ÑÏö©Í≥µÍ≥† Í≤ÄÏÉâ Ï§ë...');
    
    const browser = await puppeteer.launch({ 
      headless: false,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    try {
      const page = await browser.newPage();
      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
      
      // Ïû°ÏΩîÎ¶¨ÏïÑ ÎåÄÍ∏∞ÏóÖ Ï±ÑÏö©Ï†ïÎ≥¥
      const companies = ['ÎÑ§Ïù¥Î≤Ñ', 'Ïπ¥Ïπ¥Ïò§', 'ÎùºÏù∏', 'Ïø†Ìå°', 'Î∞∞Îã¨ÏùòÎØºÏ°±'];
      const allJobs = [];
      
      for (const company of companies) {
        try {
          const searchUrl = `https://www.jobkorea.co.kr/recruit/joblist?menucode=local&localorder=1&comp_name=${encodeURIComponent(company)}`;
          console.log(`üìç Ïû°ÏΩîÎ¶¨ÏïÑÏóêÏÑú ${company} Í≤ÄÏÉâ: ${searchUrl}`);
          
          await page.goto(searchUrl, { waitUntil: 'networkidle2', timeout: 15000 });
          await page.waitForTimeout(3000);
          
          const jobs = await page.evaluate((companyName) => {
            const jobElements = document.querySelectorAll('.list-post, .post, .recruit-item, .list-item');
            const jobs = [];
            
            Array.from(jobElements).forEach(element => {
              const titleEl = element.querySelector('a[href*="recruit"], .title a, .post-title a, h3 a, h4 a');
              const linkEl = titleEl || element.querySelector('a');
              
              if (titleEl && linkEl) {
                const title = titleEl.textContent?.trim();
                const href = linkEl.href;
                
                if (title && href && title.length > 3) {
                  jobs.push({
                    title: title,
                    originalUrl: href,
                    description: `${companyName} ${title}`,
                    location: 'ÏÑúÏö∏/Í≤ΩÍ∏∞',
                    department: 'Í∞úÎ∞úÎ∂ÄÎ¨∏',
                    jobType: 'Ï†ïÍ∑úÏßÅ',
                    company: companyName.toLowerCase().replace(/[^a-z]/g, ''),
                    postedAt: new Date().toISOString(),
                    source: 'jobkorea'
                  });
                }
              }
            });
            
            return jobs.slice(0, 3); // ÏÉÅÏúÑ 3Í∞úÎßå
          }, company);
          
          console.log(`‚úÖ ${company}: ${jobs.length}Í∞ú Ï±ÑÏö©Í≥µÍ≥† Î∞úÍ≤¨`);
          allJobs.push(...jobs);
          
          await page.waitForTimeout(2000); // ÏöîÏ≤≠ Í∞ÑÍ≤©
        } catch (error) {
          console.log(`‚ùå ${company} Í≤ÄÏÉâ Ïã§Ìå®:`, error.message);
        }
      }
      
      return allJobs;
      
    } catch (error) {
      console.error('‚ùå Ïû°ÏΩîÎ¶¨ÏïÑ ÌÅ¨Î°§ÎßÅ Ïò§Î•ò:', error.message);
      return [];
    } finally {
      await browser.close();
    }
  }

  async crawlSaramin() {
    console.log('üîç ÏÇ¨ÎûåÏù∏ÏóêÏÑú ÎÑ§Ïπ¥ÎùºÏø†Î∞∞ Ï±ÑÏö©Í≥µÍ≥† Í≤ÄÏÉâ Ï§ë...');
    
    const browser = await puppeteer.launch({ 
      headless: false,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    try {
      const page = await browser.newPage();
      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
      
      const companies = [
        { name: 'ÎÑ§Ïù¥Î≤Ñ', code: 'naver' },
        { name: 'Ïπ¥Ïπ¥Ïò§', code: 'kakao' },
        { name: 'ÎùºÏù∏', code: 'line' },
        { name: 'Ïø†Ìå°', code: 'coupang' },
        { name: 'Î∞∞Îã¨ÏùòÎØºÏ°±', code: 'baemin' }
      ];
      
      const allJobs = [];
      
      for (const { name, code } of companies) {
        try {
          const searchUrl = `https://www.saramin.co.kr/zf_user/search/recruit?searchType=search&searchword=${encodeURIComponent(name)}&recruitPageCount=20`;
          console.log(`üìç ÏÇ¨ÎûåÏù∏ÏóêÏÑú ${name} Í≤ÄÏÉâ`);
          
          await page.goto(searchUrl, { waitUntil: 'networkidle2', timeout: 15000 });
          await page.waitForTimeout(3000);
          
          const jobs = await page.evaluate((companyName, companyCode) => {
            const jobElements = document.querySelectorAll('.item_recruit, .recruit_item, .list_item');
            const jobs = [];
            
            Array.from(jobElements).forEach(element => {
              const titleEl = element.querySelector('.job_tit a, .recruit_tit a, h2 a, h3 a');
              const companyEl = element.querySelector('.corp_name a, .company a');
              
              if (titleEl && companyEl) {
                const title = titleEl.textContent?.trim();
                const company = companyEl.textContent?.trim();
                const href = titleEl.href;
                
                if (title && href && company?.includes(companyName)) {
                  jobs.push({
                    title: title,
                    originalUrl: href,
                    description: `${companyName} ${title}`,
                    location: 'ÏÑúÏö∏/Í≤ΩÍ∏∞',
                    department: 'Í∞úÎ∞úÎ∂ÄÎ¨∏',
                    jobType: 'Ï†ïÍ∑úÏßÅ',
                    company: companyCode,
                    postedAt: new Date().toISOString(),
                    source: 'saramin'
                  });
                }
              }
            });
            
            return jobs.slice(0, 3);
          }, name, code);
          
          console.log(`‚úÖ ${name}: ${jobs.length}Í∞ú Ï±ÑÏö©Í≥µÍ≥† Î∞úÍ≤¨`);
          allJobs.push(...jobs);
          
          await page.waitForTimeout(2000);
        } catch (error) {
          console.log(`‚ùå ${name} Í≤ÄÏÉâ Ïã§Ìå®:`, error.message);
        }
      }
      
      return allJobs;
      
    } catch (error) {
      console.error('‚ùå ÏÇ¨ÎûåÏù∏ ÌÅ¨Î°§ÎßÅ Ïò§Î•ò:', error.message);
      return [];
    } finally {
      await browser.close();
    }
  }

  // ÌîÑÎ°úÍ∑∏ÎûòÎ®∏Ïä§ Ï±ÑÏö©Í≥µÍ≥†
  async crawlProgrammers() {
    console.log('üîç ÌîÑÎ°úÍ∑∏ÎûòÎ®∏Ïä§ÏóêÏÑú ÎÑ§Ïπ¥ÎùºÏø†Î∞∞ Ï±ÑÏö©Í≥µÍ≥† Í≤ÄÏÉâ Ï§ë...');
    
    try {
      // ÌîÑÎ°úÍ∑∏ÎûòÎ®∏Ïä§ Ï±ÑÏö© API (Í≥µÍ∞ú API)
      const response = await fetch('https://career.programmers.co.kr/api/job_positions', {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          'Accept': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        const jobs = [];
        
        if (data.job_positions) {
          data.job_positions.forEach(job => {
            const companyName = job.company?.name?.toLowerCase();
            const targetCompanies = ['naver', 'kakao', 'line', 'coupang', 'woowa'];
            
            if (targetCompanies.some(company => companyName?.includes(company))) {
              jobs.push({
                title: job.title,
                originalUrl: `https://career.programmers.co.kr/job_positions/${job.id}`,
                description: job.summary || job.title,
                location: job.location || 'ÏÑúÏö∏',
                department: job.company?.name || 'Í∞úÎ∞úÎ∂ÄÎ¨∏',
                jobType: 'Ï†ïÍ∑úÏßÅ',
                company: this.mapCompanyName(companyName),
                postedAt: new Date().toISOString(),
                source: 'programmers'
              });
            }
          });
        }
        
        console.log(`‚úÖ ÌîÑÎ°úÍ∑∏ÎûòÎ®∏Ïä§: ${jobs.length}Í∞ú Ï±ÑÏö©Í≥µÍ≥† Î∞úÍ≤¨`);
        return jobs;
      }
    } catch (error) {
      console.log('‚ùå ÌîÑÎ°úÍ∑∏ÎûòÎ®∏Ïä§ API Ïò§Î•ò:', error.message);
    }
    
    return [];
  }

  mapCompanyName(companyName) {
    if (companyName?.includes('naver')) return 'naver';
    if (companyName?.includes('kakao')) return 'kakao';
    if (companyName?.includes('line')) return 'line';
    if (companyName?.includes('coupang')) return 'coupang';
    if (companyName?.includes('woowa') || companyName?.includes('Î∞∞Îã¨')) return 'baemin';
    return 'unknown';
  }

  // Ï†ÑÏ≤¥ Í≥µÍ≤©Ï†Å ÌÅ¨Î°§ÎßÅ Ïã§Ìñâ
  async crawlAllAggressive() {
    console.log('üöÄ Í≥µÍ≤©Ï†Å Ïã§Ï†ú Ï±ÑÏö©Í≥µÍ≥† ÌÅ¨Î°§ÎßÅ ÏãúÏûë!');
    console.log('=' .repeat(60));
    
    const results = {};
    
    try {
      // ÌîÑÎ°úÍ∑∏ÎûòÎ®∏Ïä§ (API Ïö∞ÏÑ†)
      console.log('\n1Ô∏è‚É£ ÌîÑÎ°úÍ∑∏ÎûòÎ®∏Ïä§ API ÌÅ¨Î°§ÎßÅ...');
      const programmersJobs = await this.crawlProgrammers();
      
      // Ïû°ÏΩîÎ¶¨ÏïÑ ÌÅ¨Î°§ÎßÅ
      console.log('\n2Ô∏è‚É£ Ïû°ÏΩîÎ¶¨ÏïÑ ÌÅ¨Î°§ÎßÅ...');
      const jobkoreaJobs = await this.crawlJobKorea();
      
      // ÏÇ¨ÎûåÏù∏ ÌÅ¨Î°§ÎßÅ
      console.log('\n3Ô∏è‚É£ ÏÇ¨ÎûåÏù∏ ÌÅ¨Î°§ÎßÅ...');
      const saraminJobs = await this.crawlSaramin();
      
      // Í≤∞Í≥º Ìï©ÏπòÍ∏∞
      const allJobs = [...programmersJobs, ...jobkoreaJobs, ...saraminJobs];
      
      // ÌöåÏÇ¨Î≥ÑÎ°ú Î∂ÑÎ•ò
      allJobs.forEach(job => {
        if (!results[job.company]) {
          results[job.company] = [];
        }
        results[job.company].push(job);
      });
      
      // Í≤∞Í≥º ÏöîÏïΩ
      const totalJobs = allJobs.length;
      console.log(`\nüéâ Í≥µÍ≤©Ï†Å ÌÅ¨Î°§ÎßÅ ÏôÑÎ£å! Ï¥ù ${totalJobs}Í∞ú Ïã§Ï†ú Ï±ÑÏö©Í≥µÍ≥† ÏàòÏßë`);
      
      Object.entries(results).forEach(([company, jobs]) => {
        console.log(`   ${company}: ${jobs.length}Í∞ú`);
        jobs.forEach((job, i) => {
          console.log(`     ${i + 1}. ${job.title} (${job.source})`);
        });
      });
      
      return results;
      
    } catch (error) {
      console.error('‚ùå Í≥µÍ≤©Ï†Å ÌÅ¨Î°§ÎßÅ Ïò§Î•ò:', error);
      return results;
    }
  }
}

module.exports = { AggressiveCrawler };